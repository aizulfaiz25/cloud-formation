---
AWSTemplateFormatVersion: '2010-09-09'
Description: Creates an Ubuntu 16.04 Web Server based on https://github.com/widdix/learn-cloudformation/blob/master/lab0-create-stack/demo.yaml, last access 9/6/2017

Parameters:
  KeyName:
    Description: Name of an existing EC2 KeyPair to enable SSH access to the instance
    Type: 'AWS::EC2::KeyPair::KeyName'
    ConstraintDescription: must be the name of an existing EC2 KeyPair.
  SSHLocation:
    Description: ' The IP address range that can be used to SSH to the EC2 instances'
    Type: String
    MinLength: '9'
    MaxLength: '18'
    Default: 131.247.0.0/16
    AllowedPattern: '(\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})/(\d{1,2})'
    ConstraintDescription: must be a valid IP CIDR range of the form x.x.x.x/x.
    
Resources:
  EC2Instance:
    Type: AWS::EC2::Instance
    Metadata:
      AWS::CloudFormation::Init:
        configSets:
          default: 
          - config-cfn-hup
        config-cfn-hup:
          files:
            #cfn-hup configuration 
            '/etc/cfn/cfn-hup.conf':
              content: !Sub |
                [main]
                stack=${AWS::StackId}
                region=${AWS::Region}
                interval=1
            '/etc/cfn/hooks.d/cfn-auto-reloader.conf':
              content: !Sub |
                [cfn-auto-reloader-hook]
                triggers=post.update
                path=Resources.BastionHost.Metadata.AWS::CloudFormation::Init
                action=/usr/local/bin/cfn-init -v --stack ${AWS::StackId} --resource BastionHost --region ${AWS::Region}
            #systemd service 
            '/etc/systemd/system/cfn-hup.service': 
              content: |
                [Unit]
                Description=Cloud formation helper daemon

                [Service]
                ExecStart=/usr/local/bin/cfn-hup
                Restart=always
                RestartSec=10s
                Type=notify
                NotifyAccess=all
                TimeoutStartSec=120
                TimeoutStopSec=15

                [Install]
                WantedBy=multi-user.target

          commands: 
            enable-cfn-hup:
              command: "systemctl enable cfn-hup.service" 
            start-cfn-hup:
              command: "systemctl start cfn-hup.service" 
    Properties:
      UserData:
        Fn::Base64: !Sub |
          #!bin/bash -xe
          apt-get update 
          apt-get -y install python-setuptools
          easy_install https://s3.amazonaws.com/cloudformation-examples/aws-cfn-bootstrap-latest.tar.gz
          
          /usr/local/bin/cfn-init -v --stack ${AWS::StackId} --resource BastionHost --region ${AWS::Region}
          /usr/local/bin/cfn-signal -e $? --stack ${AWS::StackId} --resource BastionHost --region ${AWS::Region}	
    Properties:
      ImageId: ami-10547475
      InstanceType: t2.micro
      SecurityGroups: 
      - !Ref WebserverSecurityGroup
      Tags:
      - Key: Name
        Value: Ubuntu16 Web + SSH Server 
      KeyName: !Ref KeyName
      UserData:
        'Fn::Base64': |
          #!/bin/bash
          set -e
          set -x
          # Set timezone
          sudo timedatectl set-timezone America/New_York
          
          # fix color of directory, which in PuTTy ends up as dark blue on 
          # black background
          bashrc_append=$(cat <<'EOT'
          d=.dircolors
          test -r $d && eval "$(dircolors $d)"
          EOT
          )
          echo "$bashrc_append" >> /home/ubuntu/.bashrc
          dircolors -p > /home/ubuntu/.dircolors
          sed -i -e 's/DIR 01;.*/DIR 01;36 # directory/' /home/ubuntu/.dircolors
          sudo chown ubuntu:ubuntu /home/ubuntu/.dircolors

          sudo apt-get update
          sudo apt-get install -y apache2
          cd /var/www/html
          echo "<h1>Dr. V's CloudFormed Server</h1><p>This page created entirely by CloudFormation</p>" >index.html

  WebserverSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: hello-world-webserver
      SecurityGroupIngress:
      - CidrIp: 0.0.0.0/0
        FromPort: 80
        IpProtocol: tcp
        ToPort: 80
      - IpProtocol: tcp
        FromPort: 22
        ToPort: 22
        CidrIp: !Ref SSHLocation
Outputs:
  HelloWorldURL:
    Description: The url pointing to our page.
    Value: !Sub 'http://${EC2Instance.PublicIp}'
          